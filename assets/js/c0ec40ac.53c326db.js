"use strict";(self.webpackChunkthnk_docs=self.webpackChunkthnk_docs||[]).push([[562],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=l(n),u=a,m=h["".concat(c,".").concat(u)]||h[u]||p[u]||s;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},9144:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const s={description:"Learn everythong about THNK servers and clients, and how they work together!",sidebar_position:1},o="Clients and servers",i={unversionedId:"base-concepts/clients-and-servers",id:"base-concepts/clients-and-servers",title:"Clients and servers",description:"Learn everythong about THNK servers and clients, and how they work together!",source:"@site/docs/base-concepts/clients-and-servers.md",sourceDirName:"base-concepts",slug:"/base-concepts/clients-and-servers",permalink:"/docs/base-concepts/clients-and-servers",draft:!1,editUrl:"https://github.com/arthuro555/THNK/tree/main/docs/docs/base-concepts/clients-and-servers.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Learn everythong about THNK servers and clients, and how they work together!",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Base concepts",permalink:"/docs/category/base-concepts"},next:{title:"Adapters",permalink:"/docs/base-concepts/adapters"}},c={},l=[{value:"Servers",id:"servers",level:2},{value:"Clients",id:"clients",level:2},{value:"Interation between server and client",id:"interation-between-server-and-client",level:2}],d={toc:l};function p(e){let{components:t,...s}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"clients-and-servers"},"Clients and servers"),(0,a.kt)("p",null,"A THNK game is always split in two parts: the server and client. They are different modes THNK can run your game in:"),(0,a.kt)("h2",{id:"servers"},"Servers"),(0,a.kt)("p",null,"A server is a trusted instance of the game that runs the game logic. There is always a single server."),(0,a.kt)("p",null,"The server can be a different entity depending on the case: it can be the local PC in singleplayer, a player's game instance, a player's dedicated game server, game servers you provide for your players..."),(0,a.kt)("p",null,"The server is in charge of executing all the game logic that you would not want a cheater to falsify. This turns out to be most of the game logic, leaving the logic that is not directly tied to the game's simulation to the clients."),(0,a.kt)("h2",{id:"clients"},"Clients"),(0,a.kt)("p",null,"A client is a game instance connected to a server. It is a dumbed down version of the game - it only takes care of:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Apparence related events (animations, camera, juice, HUD, menus...)"),(0,a.kt)("li",{parentName:"ol"},"Player input (key presses to move the character, actions in menus, sending a message in chat...)")),(0,a.kt)("p",null,"Clients are the majority of the players - and thereby most of the hackers. Since a client has little to no control over the game state that the other players interact with, since all actions are actually performed by the server, hackers cannot easily manipulate and control the game. Of course, if the server gives too much control on the player input, the protection all falls appart, so stay careful!"),(0,a.kt)("h2",{id:"interation-between-server-and-client"},"Interation between server and client"),(0,a.kt)("p",null,"Server and client both run an update regularly. On a client, an update is simply named a frame, because it produces a frame representing the current game state. On the server, it is called tick, since it is doing a step in the simulation of the game state that might not end up in a render."),(0,a.kt)("p",null,"The typical flow looks like this:"),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(8377).Z,width:"852",height:"604"})),(0,a.kt)("p",null,"The client renders a few frames, and can send commands within those frames. The server recieves those commands, and queues them. Once the time to make a server tick has come, the commands are processed by the server code, and the objects are all updated appropriately. After doing so, a patch describing the differences in the game state between before and after the server tick is generated, and sent to the client. The client applies the patch to its local copy of the game state, and displays the updated game state in the next frame. And that cycles goes on and on..."),(0,a.kt)("p",null,"That is always how server and client communicate: the client sends a command, and the server eventually responds to all clients commands with new game state."))}p.isMDXComponent=!0},8377:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/THNK-Server-Client-Diagram-f61c2fd40aa9b2ac100834343d2fdaee.svg"}}]);